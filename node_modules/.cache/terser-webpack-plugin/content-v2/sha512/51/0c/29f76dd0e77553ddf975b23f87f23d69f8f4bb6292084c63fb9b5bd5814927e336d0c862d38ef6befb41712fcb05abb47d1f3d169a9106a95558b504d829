{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{420:function(_,v,t){\"use strict\";t.r(v);var a=t(56),r=Object(a.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":_.$parent.slotKey}},[t(\"h1\",{attrs:{id:\"_1类型\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1类型\"}},[_._v(\"#\")]),_._v(\" 1类型\")]),_._v(\" \"),t(\"h2\",{attrs:{id:\"内置类型\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#内置类型\"}},[_._v(\"#\")]),_._v(\" 内置类型\")]),_._v(\" \"),t(\"ul\",[t(\"li\",[_._v(\"number\")]),_._v(\" \"),t(\"li\",[_._v(\"string\")]),_._v(\" \"),t(\"li\",[_._v(\"boolean\")]),_._v(\" \"),t(\"li\",[_._v(\"null\")]),_._v(\" \"),t(\"li\",[_._v(\"undefined\")]),_._v(\" \"),t(\"li\",[_._v(\"object\")]),_._v(\" \"),t(\"li\",[_._v(\"symbol\")])]),_._v(\" \"),t(\"hr\"),_._v(\" \"),t(\"ul\",[t(\"li\",[_._v(\"typeof返回类型的字符串值\")]),_._v(\" \"),t(\"li\",[_._v(\"函数是可调用对象，它有一个内部属性[[Call]]，该属性使其可以被调用\")]),_._v(\" \"),t(\"li\",[_._v(\"函数可以拥有属性，函数对象的length属性是其声明的参数的个数\")])]),_._v(\" \"),t(\"h2\",{attrs:{id:\"值和类型\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#值和类型\"}},[_._v(\"#\")]),_._v(\" 值和类型\")]),_._v(\" \"),t(\"ul\",[t(\"li\",[_._v(\"变量没有类型，值才有，变量可以是任何类型\")]),_._v(\" \"),t(\"li\",[_._v(\"对于未声明的变量，typeof返回undefined\")]),_._v(\" \"),t(\"li\",[_._v(\"访问不存在的对象属性不会产生ReferenceError\")])]),_._v(\" \"),t(\"h1\",{attrs:{id:\"_2值\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2值\"}},[_._v(\"#\")]),_._v(\" 2值\")]),_._v(\" \"),t(\"h2\",{attrs:{id:\"数组\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数组\"}},[_._v(\"#\")]),_._v(\" 数组\")]),_._v(\" \"),t(\"ul\",[t(\"li\",[_._v(\"使用delete运算符可以将单元从数组中删除，但数组的length属性不会变化\")]),_._v(\" \"),t(\"li\",[_._v(\"数组可以像对象一样包含字符串键值和属性，字符串键值不计算在数组长度内\")]),_._v(\" \"),t(\"li\",[_._v(\"如果字符串键值可以被强制类型转换为十进制数字，它就会被当作数字索引处理，会被计算在数组长度内\")]),_._v(\" \"),t(\"li\",[_._v(\"类数组：一组通过数字索引的值\")]),_._v(\" \"),t(\"li\",[_._v(\"将类数组转化为真正的数组：Array.prototype.slice.call、Array.from\")])]),_._v(\" \"),t(\"h2\",{attrs:{id:\"字符串\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#字符串\"}},[_._v(\"#\")]),_._v(\" 字符串\")]),_._v(\" \"),t(\"ul\",[t(\"li\",[_._v(\"字符串不可变是指字符串的成员函数不会改变其原始值，而是创建并返回一个新的字符串\")]),_._v(\" \"),t(\"li\",[_._v(\"字符串也有length属性、indexOf和concat方法\")]),_._v(\" \"),t(\"li\",[_._v(\"字符串可以借用数组的非变更方法\")])]),_._v(\" \"),t(\"div\",{staticClass:\"language-js extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[t(\"code\",[_._v(\"Array\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[_._v(\".\")]),_._v(\"prptotype\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[_._v(\".\")]),_._v(\"join\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[_._v(\".\")]),_._v(\"call\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[_._v(\"Array\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[_._v(\".\")]),_._v(\"prototype\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[_._v(\".\")]),_._v(\"map\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[_._v(\".\")]),_._v(\"call\\n\")])])]),t(\"ul\",[t(\"li\",[_._v(\"字符串无法借用数组的可变更成员函数reverse，因为字符串不可变\")])]),_._v(\" \"),t(\"h2\",{attrs:{id:\"数字\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数字\"}},[_._v(\"#\")]),_._v(\" 数字\")]),_._v(\" \"),t(\"ul\",[t(\"li\",[_._v(\"js使用的是双精度格式（64位二进制）\")]),_._v(\" \"),t(\"li\",[_._v(\"特别大和特别小的数字默认使用指数格式表示，toExponential()函数返回指数格式表示\")]),_._v(\" \"),t(\"li\",[_._v(\"tofixed()方法指定小数部分显示位数\")]),_._v(\" \"),t(\"li\",[_._v(\"toPrecision()方法指定有效数位的显示位数\")]),_._v(\" \"),t(\"li\",[_._v(\".运算符会被优先识别为数字字面量的一部分，然后才是对象属性访问运算符\")]),_._v(\" \"),t(\"li\",[_._v(\"从ES6开始，不再支持0363八进制格式\")]),_._v(\" \"),t(\"li\",[_._v(\"使用0x、0o、0xi表示二进制、八进制、十六进制\")])]),_._v(\" \"),t(\"hr\"),_._v(\" \"),t(\"h3\",{attrs:{id:\"_0-1-0-2-0-3\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_0-1-0-2-0-3\"}},[_._v(\"#\")]),_._v(\" 0.1+0.2 === 0.3\")]),_._v(\" \"),t(\"ul\",[t(\"li\",[_._v(\"设置一个误差范围值（机器精度），Number.EPSILON(2^-52)\")])]),_._v(\" \"),t(\"hr\"),_._v(\" \"),t(\"ul\",[t(\"li\",[_._v(\"最大浮点数Number.MAX_VALUE\")]),_._v(\" \"),t(\"li\",[_._v(\"最小浮点数Number.MIN_VALUE\")]),_._v(\" \"),t(\"li\",[_._v(\"最大整数Number.MAX_SAFE_INTEGER\")]),_._v(\" \"),t(\"li\",[_._v(\"最小整数Number.MIN_SAFE_INTEGER\")]),_._v(\" \"),t(\"li\",[_._v(\"检测一个值是否是整数：Number.isInteger\")]),_._v(\" \"),t(\"li\",[_._v(\"检测一个值是否是安全的整数：Number.isSafeInteger\")]),_._v(\" \"),t(\"li\",[_._v(\"整数最大能够达到53位，有些数字操作（如数位操作）只适用于32位数字\")]),_._v(\" \"),t(\"li\",[_._v(\"a | 0可以将变量a中的数值转换为32位有符号整数，因为数位运算符|只适用于32位整数\")])]),_._v(\" \"),t(\"h2\",{attrs:{id:\"特殊数值\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#特殊数值\"}},[_._v(\"#\")]),_._v(\" 特殊数值\")]),_._v(\" \"),t(\"ul\",[t(\"li\",[_._v(\"null是一个特殊的关键字，不是标识符，不能当作变量来使用和赋值\")]),_._v(\" \"),t(\"li\",[_._v(\"undefined是一个标识符，可以被当作变量来使用和赋值\")]),_._v(\" \"),t(\"li\",[_._v(\"void不改变表达式的结果，只是让表达式不返回值\")]),_._v(\" \"),t(\"li\",[_._v(\"NaN可以理解为无效数值，其类型仍是number\")]),_._v(\" \"),t(\"li\",[_._v(\"全局工具函数isNaN，检查参数是否是无效数字，是否是非数字类型，如字符串也会返回true\")]),_._v(\" \"),t(\"li\",[_._v(\"ES6使用Number.isNaN\")]),_._v(\" \"),t(\"li\",[_._v(\"NaN不能等于自身\")]),_._v(\" \"),t(\"li\",[_._v(\"Infinity/Infinity结果为NaN\")]),_._v(\" \"),t(\"li\",[_._v(\"只有乘除法会产生负零，加减法不会得到负零\")]),_._v(\" \"),t(\"li\",[_._v(\"对负零进行字符串化会返回“0”\")]),_._v(\" \"),t(\"li\",[_._v(\"对“-0”从字符串转化为数字，得到-0\")]),_._v(\" \"),t(\"li\",[_._v(\"-0和0相等，无法通过==和===判断\")]),_._v(\" \"),t(\"li\",[_._v(\"Object.is判断两个值是否绝对相等，主要用来处理特殊的相等比较\")])]),_._v(\" \"),t(\"h1\",{attrs:{id:\"_3原生函数\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3原生函数\"}},[_._v(\"#\")]),_._v(\" 3原生函数\")]),_._v(\" \"),t(\"h2\",{attrs:{id:\"常用原生函数\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#常用原生函数\"}},[_._v(\"#\")]),_._v(\" 常用原生函数\")]),_._v(\" \"),t(\"ul\",[t(\"li\",[_._v(\"String()\")]),_._v(\" \"),t(\"li\",[_._v(\"Number()\")]),_._v(\" \"),t(\"li\",[_._v(\"Boolean()\")]),_._v(\" \"),t(\"li\",[_._v(\"Array()\")]),_._v(\" \"),t(\"li\",[_._v(\"Object()\")]),_._v(\" \"),t(\"li\",[_._v(\"Function()\")]),_._v(\" \"),t(\"li\",[_._v(\"RegExp()\")]),_._v(\" \"),t(\"li\",[_._v(\"Date()\")]),_._v(\" \"),t(\"li\",[_._v(\"Error()\")]),_._v(\" \"),t(\"li\",[_._v(\"Symbol()\")])]),_._v(\" \"),t(\"hr\"),_._v(\" \"),t(\"ul\",[t(\"li\",[_._v(\"所有typeof返回值为“object”的对象都包含一个无法直接访问的内部属性[[Class]]，一般通过Object.prototype.toString.call查看\")]),_._v(\" \"),t(\"li\",[_._v('null和undefined美誉原生构造函数，但内部[[Class]]属性值仍为\"[object Null]\"和\"[object Undefined]\"')]),_._v(\" \"),t(\"li\",[_._v(\"valueOf()可以得到封装对象中的基本类型值\")]),_._v(\" \"),t(\"li\",[_._v(\"构造函数\"),t(\"strong\",[_._v(\"Array不要求必须带new关键字\")])]),_._v(\" \"),t(\"li\",[_._v(\"Array构造函数织带一个数字参数时，该参数会被作为数组的预设长度\")]),_._v(\" \"),t(\"li\",[_._v(\"new Array(3)会创建空单元数组[empty × 3]，要想创建包含undefined的数组可以通过Array.apply(null, { length: 3 })\")]),_._v(\" \"),t(\"li\",[_._v('动态定义正则表达式new RegExp(\"pattern\"，\"flags\")')]),_._v(\" \"),t(\"li\",[_._v(\"Date.now()和(new Date()).getTime()获得当前Unix时间戳\")]),_._v(\" \"),t(\"li\",[_._v(\"调用Date()时不带new关键字，会得到当前日期的字符串值\")]),_._v(\" \"),t(\"li\",[_._v(\"构造函数\"),t(\"strong\",[_._v(\"Error不要求必须带new关键字\")])]),_._v(\" \"),t(\"li\",[_._v(\"错误对象通过只读属性.stack获得当前运行栈的上下文，包括函数调用栈信息和产生错误的代码行号，也可以调用toString()来获得经过格式化的便于阅读的错误信息\")]),_._v(\" \"),t(\"li\",[_._v(\"通常错误对象至少包含一个message属性\")]),_._v(\" \"),t(\"li\",[t(\"strong\",[_._v(\"Symbol原生构造函数不能带new关键字\")]),_._v(\"，否则会出错\")])]),_._v(\" \"),t(\"h2\",{attrs:{id:\"原生原型\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#原生原型\"}},[_._v(\"#\")]),_._v(\" 原生原型\")]),_._v(\" \"),t(\"ul\",[t(\"li\",[_._v(\"根据文档约定将String.prototype.xyz简写成String#xyz，\"),t(\"strong\",[_._v(\"对其他原型也同样如此\")])]),_._v(\" \"),t(\"li\",[_._v(\"Function.prototype是一个空函数，RegExp.prototype是一个空正则表达式，Array.prototype是一个空数组\")]),_._v(\" \"),t(\"li\",[_._v(\"可以将原型作为默认值，因为.prototype已经被创建并且仅创建一次\")])]),_._v(\" \"),t(\"h1\",{attrs:{id:\"_4强制类型转换\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4强制类型转换\"}},[_._v(\"#\")]),_._v(\" 4强制类型转换\")]),_._v(\" \"),t(\"ul\",[t(\"li\",[_._v(\"强制类型转换只会返回标量基本类型值，如数字、字符串和布尔值，不会返回对象和函数\")])]),_._v(\" \"),t(\"h2\",{attrs:{id:\"tostring\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#tostring\"}},[_._v(\"#\")]),_._v(\" toString\")]),_._v(\" \"),t(\"ul\",[t(\"li\",[_._v('null => \"null\"')]),_._v(\" \"),t(\"li\",[_._v('undefined => \"undefined\"')]),_._v(\" \"),t(\"li\",[_._v('true => \"true\"')]),_._v(\" \"),t(\"li\",[_._v(\"对于普通对象，除非自行定义，否则toString(Object#toString())返回内部属性[[Class]]的值\")])])])}),[],!1,null,null,null);v.default=r.exports}}]);","extractedComments":[]}