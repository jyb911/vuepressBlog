{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{446:function(v,_,t){\"use strict\";t.r(_);var e=t(56),i=Object(e.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":v.$parent.slotKey}},[t(\"h6\",{attrs:{id:\"前置类声明\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#前置类声明\"}},[v._v(\"#\")]),v._v(\" 前置类声明\")]),v._v(\" \"),t(\"p\",[v._v(\"头文件之间不可以有强依赖性，通过前置类声明可以引用类符号，cpp文件中可以包含多个头文件，而不会导致循环依赖\")]),v._v(\" \"),t(\"h6\",{attrs:{id:\"转换构造函数\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#转换构造函数\"}},[v._v(\"#\")]),v._v(\" 转换构造函数\")]),v._v(\" \"),t(\"p\",[v._v(\"可以只用一个不同类型的实参进行调用的构造函数\")]),v._v(\" \"),t(\"p\",[v._v(\"const对象不能调用非const方法，const方法（函数后加const）中可以改变mutable成员的值\")]),v._v(\" \"),t(\"p\",[v._v(\"Qt模块，除了core和gui都需要在qmake的工程文件中启用\")]),v._v(\" \"),t(\"p\",[v._v(\"重载顺序\")]),v._v(\" \"),t(\"ol\",[t(\"li\",[v._v(\"完全匹配\")]),v._v(\" \"),t(\"li\",[v._v(\"类型提升\")]),v._v(\" \"),t(\"li\",[v._v(\"转换构造函数或转换运算符\")]),v._v(\" \"),t(\"li\",[v._v(\"省略号\")])]),v._v(\" \"),t(\"p\",[v._v(\"Qt插件可以将代码加载到一个应用程序中而无需重新编译或链接\")]),v._v(\" \"),t(\"p\",[v._v(\"Qt的类似垃圾回收机制:\")]),v._v(\" \"),t(\"ol\",[t(\"li\",[v._v(\"容器支持引用计数和写时复制\")]),v._v(\" \"),t(\"li\",[v._v(\"父对象和子对象\")]),v._v(\" \"),t(\"li\",[v._v(\"QPointer、QSharedPointer和QWeakReference\")]),v._v(\" \"),t(\"li\",[v._v(\"对象子类化\")]),v._v(\" \"),t(\"li\",[v._v(\"栈对象\")])]),v._v(\" \"),t(\"ul\",[t(\"li\",[v._v(\"cin：读取整数、浮点数、字符和字符串\")]),v._v(\" \"),t(\"li\",[v._v(\"getline：读取字符串、读取一行直到遇到换行符\")])]),v._v(\" \"),t(\"p\",[v._v(\"调用函数前先声明而非定义\")]),v._v(\" \"),t(\"p\",[v._v(\"make会加载Makefile文件并编译和链接\")]),v._v(\" \"),t(\"p\",[v._v(\"Qt中提供qmake工具生成Makefile文件\")]),v._v(\" \"),t(\"p\",[v._v(\"CONFIG += console有这个选项才能看到发送给qDebug的消息，针对Windows平台\")]),v._v(\" \"),t(\"p\",[v._v(\"ofstream：输出文件流，写入\")]),v._v(\" \"),t(\"p\",[v._v(\"ifstream：输入文件流，读取\")]),v._v(\" \"),t(\"p\",[v._v(\"TEMPLATE = subdirs 父目录pro文件中包含，会在父目录和每个子目录下都生成Makefile\")]),v._v(\" \"),t(\"p\",[v._v(\"Modbus工业控制协议，一主多从，只有一个设备可以发送请求\")]),v._v(\" \"),t(\"p\",[v._v(\"Modbus的4中操作对象：\")]),v._v(\" \"),t(\"ol\",[t(\"li\",[v._v(\"线圈coils：PLC的输出位，开关量，在Modbus中可读可写\")]),v._v(\" \"),t(\"li\",[v._v(\"离散输入Discree Inputs：PLC的输入位，开关量，在Modbus中只读\")]),v._v(\" \"),t(\"li\",[v._v(\"输入寄存器：PLC中只能从模拟量输入端改变的寄存器，在Modbus中只读\")]),v._v(\" \"),t(\"li\",[v._v(\"保持寄存器Holding Registers：PLC中用于输出模拟量信号的寄存器，在Modbus中可读可写\")])]),v._v(\" \"),t(\"p\",[v._v(\"使用TCP通信时，主站为client，建立连接，从站为server，等待连接\")]),v._v(\" \"),t(\"p\",[v._v(\"PLC（PRogrammable Lgic Controller）可编程逻辑控制器\")]),v._v(\" \"),t(\"p\",[v._v(\"Modbus通信帧：MBAP报文头+PDU\")]),v._v(\" \"),t(\"p\",[v._v(\"MBAP由事务处理标识（2字节）、协议标识符（2字节）、长度（2字节）、接下来的长度（2字节）、单元标识符（1字节）\")]),v._v(\" \"),t(\"p\",[v._v(\"PDU由功能码（1字节）+起始地址（2字节）+读取数量（2字节）\")]),v._v(\" \"),t(\"p\",[v._v(\"响应：功能码（1字节）+数据长度（1字节）+数据\")]),v._v(\" \"),t(\"p\",[v._v(\"内联函数无需跳到函数地址处执行再跳回，而是在调用的地方有一个函数副本\")]),v._v(\" \"),t(\"p\",[v._v(\"extern\")]),v._v(\" \"),t(\"p\",[v._v(\"声明性语言不生成对应指令\")]),v._v(\" \"),t(\"p\",[v._v('在C++中调用C，必须把原来的C声明放在extern \"C\" {/'),t(\"em\",[v._v(\"code\")]),v._v(\"/}中\")]),v._v(\" \"),t(\"p\",[v._v('修改C头文件，声明中加入extern \"C\"')]),v._v(\" \"),t(\"p\",[v._v(\"C++可执行程序的数据存储区域分为只读数据区、全局/静态存储区、自由存储区、栈区和堆区\")]),v._v(\" \"),t(\"p\",[v._v(\"整型、字符型、布尔型、浮点类型\")]),v._v(\" \"),t(\"p\",[v._v(\"按作用域范围分为全局变量（静态变量）和局部变量（动态变量）\")]),v._v(\" \"),t(\"p\",[v._v(\"变量存储类型：auto、register为动态存储；extern、static为静态存储\")]),v._v(\" \"),t(\"p\",[v._v(\"作用域：全局、局部、类、命名空间、文件、语句\")]),v._v(\" \"),t(\"p\",[v._v(\"std::bind用于将一个可调用对象（如函数、lambda表达式或函数指针）的参数与给定的参数进行绑定，返回一个新的可调用对象\")]),v._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[v._v(\"git reset --soft commit_id\\ngit push origin master --force\\n\")])])]),t(\"p\",[v._v(\"Layout、addWidget、setLayout：初始化子widget时未指定父对象，但通过添加到Layout中，父对象调用setLayout来为子widget设置父对象\")]),v._v(\" \"),t(\"p\",[v._v(\"QOverlad\"),t(\"int\",[v._v(\"::of 函数重载，得到函数参数为int 的重载版本的函数指针\")])],1),v._v(\" \"),t(\"p\",[v._v(\"QObject::sender()返回一个QObject指针，指向发送信号出发槽函数的对象\")]),v._v(\" \"),t(\"p\",[v._v(\"QMetaObject::invokeMethod通过字符串调用对象的成员函数，第一个参数为对象指针，第二个参数时成员函数名称字符串格式，后面参数是传递给成员函数的参数\")]),v._v(\" \"),t(\"p\",[v._v(\"Q_ARG宏用于将参数传递给Qt的信号槽机制\")]),v._v(\" \"),t(\"h6\",{attrs:{id:\"变量命名方式\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#变量命名方式\"}},[v._v(\"#\")]),v._v(\" 变量命名方式\")]),v._v(\" \"),t(\"ul\",[t(\"li\",[v._v(\"驼峰式，int myAge\")]),v._v(\" \"),t(\"li\",[v._v(\"帕斯卡，int MyAge\")]),v._v(\" \"),t(\"li\",[v._v(\"匈牙利，iMyAge\")])]),v._v(\" \"),t(\"p\",[v._v(\"初始化数组使用初始化列表，由大括号“{ }”括起来的一组初始值，每个初始值之间使用逗号隔开\")]),v._v(\" \"),t(\"p\",[v._v(\"抽象分类是一个迭代的过程，它既不是自顶向下的活动，也不是自底向上的活动，设计不会都从超类开始，也不会都从基类开始，而是从不完美的类开始，随着对问题理解程度的加深，可能会需要提取公共类或将一个类拆分成两个类，最终通过增量式的迭代，得到一个高内聚、低耦合的类。\")]),v._v(\" \"),t(\"p\",[v._v(\"CircularGauge圆形仪表盘\")]),v._v(\" \"),t(\"p\",[v._v(\"anchors指定对象与父对象和同级对象的相对几何位置\")]),v._v(\" \"),t(\"p\",[v._v(\"Behavior on property 属性行为（一种动画类型）指定了一个动画定义属性的每次改变并赋值给属性，每次属性改变，动画都会运行。\")]),v._v(\" \"),t(\"p\",[v._v(\"QString\")]),v._v(\" \"),t(\"p\",[v._v(\"QList\")]),v._v(\" \"),t(\"p\",[v._v(\"QStringList\")]),v._v(\" \"),t(\"p\",[v._v(\"QFile\")]),v._v(\" \"),t(\"p\",[v._v(\"QTextStream\")]),v._v(\" \"),t(\"p\",[v._v(\"QDataSream\")]),v._v(\" \"),t(\"p\",[v._v(\"forever{}等同于for(ii)\")]),v._v(\" \"),t(\"p\",[v._v(\"QlistWidget\")]),v._v(\" \"),t(\"p\",[v._v(\"QListWidgetItem\")]),v._v(\" \"),t(\"p\",[v._v(\"Q_ASSERT，检查程序中的条件是否为真，条件为假时中断程序的执行，需要包含\"),t(\"QDebug\",[v._v(\"和\"),t(\"QtTest\")],1)],1),v._v(\" \"),t(\"p\",[v._v(\"QGraphicsView图形窗口\")]),v._v(\" \"),t(\"p\",[v._v(\"QGraphicsScene图形场景\")]),v._v(\" \"),t(\"p\",[v._v(\"QGraphicsItem图形对象\")]),v._v(\" \"),t(\"p\",[v._v(\"QListView链表视图\")]),v._v(\" \"),t(\"p\",[v._v(\"QStringListModel字符串链表模型\")]),v._v(\" \"),t(\"p\",[v._v(\"QSqlDatabase\")]),v._v(\" \"),t(\"p\",[v._v(\"QSqlTableModel\")]),v._v(\" \"),t(\"p\",[v._v(\"QQuickView快速视图，将QML文档作为它的资源\")]),v._v(\" \"),t(\"p\",[v._v(\"自定义属性 property+类型+属性名\")]),v._v(\" \"),t(\"p\",[v._v(\"如果自定义属性名与已定义的默认属性名不重复，使用default可以将一个属性定义为默认属性，添加子元素时会自动添加默认属性\")]),v._v(\" \"),t(\"p\",[v._v(\"property alias 别名，转发一个属性或转发一个属性对象到另一个作用域\")]),v._v(\" \"),t(\"p\",[v._v(\"一个元素id应该只在当前文档中被引用，QML提供了动态作用域的机制，后加载的文档会覆盖之前加载文档的元素id，没有被覆盖的元素id可以被引用\")]),v._v(\" \"),t(\"p\",[v._v(\"属性绑定与JS赋值不同，绑定存在于整个声明周期，虽然JS赋值只会产生一次效果，但当新的绑定生效或使用JS赋值给属性后，绑定的声明周期就会结束\")]),v._v(\" \"),t(\"p\",[v._v(\"一个矩形框如果没有width/height将不可见\")]),v._v(\" \"),t(\"p\",[v._v(\"组件：alias属性导出，signal导出信号，和其他组件文件放在同一目录下即可引用，只有根级目录的属性才能被其他文件访问，组件的子元素属性必须通过alias才能被其他文件使用\")]),v._v(\" \"),t(\"p\",[v._v(\"rotation\")]),v._v(\" \"),t(\"p\",[v._v(\"scale\")]),v._v(\" \"),t(\"p\",[v._v(\"smooth:true antialising卡抗锯齿\")]),v._v(\" \"),t(\"p\",[v._v(\"z-property堆叠顺序，代码中先出现的元素有更低的堆叠顺序\")]),v._v(\" \"),t(\"p\",[v._v(\"定位元素：Row、Column、Grid、Flow作为定位器\")]),v._v(\" \"),t(\"p\",[v._v(\"spacing控制间隔\")]),v._v(\" \"),t(\"p\",[v._v(\"row中，layoutDirection排列方式\")]),v._v(\" \"),t(\"p\",[v._v(\"QtQuick 动态视图ListView，GridView，基于Filickable可滑动区域元素，同时限制同时实例化的代理数量\")]),v._v(\" \"),t(\"p\",[v._v(\"使用model保存数据，使用delegate来实例化\")]),v._v(\" \"),t(\"p\",[v._v(\"列表视图不会限制被显示的代理项，只在限制区域内显示，通过clip属性激活裁剪功能\")]),v._v(\" \"),t(\"p\",[v._v(\"QTimer和QObject中的startTimer\")]),v._v(\" \"),t(\"p\",[v._v(\"sizePolicy\")]),v._v(\" \"),t(\"p\",[v._v(\"sizeHint为布局管理中控件的默认尺寸，如果控件在布局管理中就为无效的值\")]),v._v(\" \"),t(\"ul\",[t(\"li\",[v._v(\"Fixed：控件大小就是它的sizeHint，不可放大缩小\")]),v._v(\" \"),t(\"li\",[v._v(\"Minimum：sizeHint为控件最小尺寸\")]),v._v(\" \"),t(\"li\",[v._v(\"Maximum：sizeHint为控件最大尺寸\")]),v._v(\" \"),t(\"li\",[v._v(\"Preferred：控件大小就是它的sizeHint，可以放大或缩小\")]),v._v(\" \"),t(\"li\",[v._v(\"Expanding：控件自行增大或缩小\")])]),v._v(\" \"),t(\"p\",[v._v(\"%运算符，两个操作数必须是整型，用于浮点数将导致编译错误\")]),v._v(\" \"),t(\"p\",[v._v(\"C++只保证float6个有效位\")]),v._v(\" \"),t(\"p\",[v._v(\"C++规定标识符只能由字母、数字和下划线3种字符组成，且第一个字符必须为字母或下划线。\")]),v._v(\" \"),t(\"p\",[v._v(\"全局变量和static修饰的局部变量默认初始化为 0 。因为全局变量和static静态局部变量存储在静态数据区。在静态数据区，内存中所有的字节默认值都是 0x00。\")]),v._v(\" \"),t(\"p\",[v._v(\"C++中的const是真正的常量，在定义时会被放到符号表中，当编译过程中发现有直接使用const定义的标识符时直接就从符号表中获取这个值\")]),v._v(\" \"),t(\"p\",[v._v(\"字符串字面量和字符串变量\")]),v._v(\" \"),t(\"p\",[v._v(\"字符串字面量存储在静态存储区的常量区，字符串变量存储在栈区\")]),v._v(\" \"),t(\"p\",[v._v(\"常量：\")]),v._v(\" \"),t(\"ul\",[t(\"li\",[v._v(\"字面常量\")]),v._v(\" \"),t(\"li\",[v._v(\"const常量\")]),v._v(\" \"),t(\"li\",[v._v(\"constexpr常量表达式\")]),v._v(\" \"),t(\"li\",[v._v(\"enum枚举常量\")]),v._v(\" \"),t(\"li\",[v._v(\"#define定义的常量\")])]),v._v(\" \"),t(\"p\",[v._v(\"unsigned int变量的值为0，再将其值减1会导致环绕。\")]),v._v(\" \"),t(\"p\",[v._v(\"多维数组初始化：\")]),v._v(\" \"),t(\"div\",{staticClass:\"language-c++ extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[v._v(\"// 顺序初始化\\nint arr[2][3] = {0, 1, 2, 3, 4, 5};\\n// 按行初始化\\nint arr[2][3] = {{0, 1, 2}, {3, 4, 5}};\\n\")])])]),t(\"p\",[v._v(\"动态数组 std::vector\")]),v._v(\" \"),t(\"p\",[v._v(\"在数组中间插入’\\\\0‘并不会改变数组的长度，而只会导致该数组作为输入的字符串处理将到'\\\\0'的位置结束\")]),v._v(\" \"),t(\"p\",[v._v(\"strlen输出字符数组长度不算'\\\\0'\")]),v._v(\" \"),t(\"p\",[v._v(\"C风格字符串作为输入的函数如strlen、strcpy、strcat等，会寻找终止空字符，如果没有在字符数组末尾添加空字符，这些函数将跨越字符数组的边界\")]),v._v(\" \"),t(\"p\",[v._v(\"要将一条语句放在两行中，可在第一行末尾添加反斜杠\")]),v._v(\" \"),t(\"p\",[v._v(\"左值通常是内存单元，右值通常是内存单元的值，所有的左值都可以作为右值，但并非所有的右值都可以作左值\")]),v._v(\" \"),t(\"p\",[v._v(\"使用后缀运算符时，先将右值赋给左值，再将右值递增或递减。使用前缀运算符时，先将右值递增或递减，再将结果赋给左值。\")]),v._v(\" \"),t(\"p\",[v._v(\"理论上，前缀运算符性能更高，因为后缀运算符需要编译器临时存储还没有改变的变量值\")]),v._v(\" \"),t(\"p\",[v._v(\"bitset简化二进制表示\")]),v._v(\" \"),t(\"p\",[v._v(\"sizeof运算符不能重载\")]),v._v(\" \"),t(\"p\",[v._v(\"Venus、Jupiter、Mercury、Mars、Saturn\")])])}),[],!1,null,null,null);_.default=i.exports}}]);","extractedComments":[]}