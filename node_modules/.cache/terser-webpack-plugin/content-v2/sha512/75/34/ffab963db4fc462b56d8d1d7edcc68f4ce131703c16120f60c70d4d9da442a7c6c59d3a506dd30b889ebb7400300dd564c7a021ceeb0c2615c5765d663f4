{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{433:function(t,s,a){\"use strict\";a.r(s);var r=a(56),e=Object(r.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[a(\"h2\",{attrs:{id:\"regular-expression\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#regular-expression\"}},[t._v(\"#\")]),t._v(\" Regular Expression\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"定义\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#定义\"}},[t._v(\"#\")]),t._v(\" 定义\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"正则表达式是用于匹配字符串中字符组合的模式\")]),t._v(\" \"),a(\"li\",[t._v(\"数据类型：对象\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language-js extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 定义一个正则表达式字面量\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"let\")]),t._v(\" re \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token regex\"}},[a(\"span\",{pre:!0,attrs:{class:\"token regex-delimiter\"}},[t._v(\"/\")]),a(\"span\",{pre:!0,attrs:{class:\"token regex-source language-regex\"}},[t._v(\"ab+c\")]),a(\"span\",{pre:!0,attrs:{class:\"token regex-delimiter\"}},[t._v(\"/\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 调用RegExp对象的构造函数\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"let\")]),t._v(\" re \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"RegExp\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"ab+c\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"g\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\")])])]),a(\"h3\",{attrs:{id:\"语法\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#语法\"}},[t._v(\"#\")]),t._v(\" 语法\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"string-prototype-match\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#string-prototype-match\"}},[t._v(\"#\")]),t._v(\" String.prototype.match\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"参数为正则表达式对象\")]),t._v(\" \"),a(\"li\",[t._v(\"如果正则表达式对象有g修饰符，返回与完整正则表达式匹配的\"),a(\"strong\",[t._v(\"所有结果\")]),t._v(\"，但不会返回捕获组\")]),t._v(\" \"),a(\"li\",[t._v(\"如果未使用 g 修饰符，则仅返回第一个完整匹配及其相关的捕获组\")]),t._v(\" \"),a(\"li\",[t._v(\"找不到匹配返回null\")])]),t._v(\" \"),a(\"h4\",{attrs:{id:\"string-prototype-matchall\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#string-prototype-matchall\"}},[t._v(\"#\")]),t._v(\" String.prototype.matchAll\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"参数为正则表达式对象，必须有g修饰符否则TypeError\")]),t._v(\" \"),a(\"li\",[t._v(\"返回所有匹配结果和捕获组构成的迭代器\")])]),t._v(\" \"),a(\"h4\",{attrs:{id:\"string-prototype-replace\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#string-prototype-replace\"}},[t._v(\"#\")]),t._v(\" String.prototype.replace\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"参数是匹配模式和替换值\")]),t._v(\" \"),a(\"li\",[t._v(\"返回替换后的新字符串\")]),t._v(\" \"),a(\"li\",[t._v(\"匹配模式可以是字符串或正则表达式对象，是字符串时，只替换第一个匹配项\")]),t._v(\" \"),a(\"li\",[t._v(\"替换值可以是字符串或每次匹配都要调用的回调函数\")])]),t._v(\" \"),a(\"h5\",{attrs:{id:\"替换值为字符串\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#替换值为字符串\"}},[t._v(\"#\")]),t._v(\" 替换值为字符串\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"可以插入特殊变量\")]),t._v(\" \"),a(\"li\",[t._v(\"$&插入匹配到的字串\")]),t._v(\" \"),a(\"li\",[t._v(\"$n插入第n个捕获组\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language-js extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" re \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token regex\"}},[a(\"span\",{pre:!0,attrs:{class:\"token regex-delimiter\"}},[t._v(\"/\")]),a(\"span\",{pre:!0,attrs:{class:\"token regex-source language-regex\"}},[t._v(\"(\\\\w+)\\\\s(\\\\w+)\")]),a(\"span\",{pre:!0,attrs:{class:\"token regex-delimiter\"}},[t._v(\"/\")])]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" str \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"John Smith\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" newstr \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" str\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"replace\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"re\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"$2, $1\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// Smith, John\")]),t._v(\"\\nconsole\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"newstr\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])]),a(\"h5\",{attrs:{id:\"替换值为函数\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#替换值为函数\"}},[t._v(\"#\")]),t._v(\" 替换值为函数\")]),t._v(\" \"),a(\"p\",[t._v(\"参数：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"match：匹配到的子串\")]),t._v(\" \"),a(\"li\",[t._v(\"p1，p2，... pn n个捕获组\")]),t._v(\" \"),a(\"li\",[t._v(\"offset：匹配到的子串在原字符串中的偏移量\")]),t._v(\" \"),a(\"li\",[t._v(\"string：原字符串\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language-js extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" re \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token regex\"}},[a(\"span\",{pre:!0,attrs:{class:\"token regex-delimiter\"}},[t._v(\"/\")]),a(\"span\",{pre:!0,attrs:{class:\"token regex-source language-regex\"}},[t._v(\"(\\\\w+)\\\\s(\\\\w+)\")]),a(\"span\",{pre:!0,attrs:{class:\"token regex-delimiter\"}},[t._v(\"/\")])]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" str \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"John Smith\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"function\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"replacer\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token parameter\"}},[t._v(\"match\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" p1\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" p2\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" offset\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" string\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token template-string\"}},[a(\"span\",{pre:!0,attrs:{class:\"token template-punctuation string\"}},[t._v(\"`\")]),a(\"span\",{pre:!0,attrs:{class:\"token interpolation\"}},[a(\"span\",{pre:!0,attrs:{class:\"token interpolation-punctuation punctuation\"}},[t._v(\"${\")]),t._v(\"p2\"),a(\"span\",{pre:!0,attrs:{class:\"token interpolation-punctuation punctuation\"}},[t._v(\"}\")])]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\" \")]),a(\"span\",{pre:!0,attrs:{class:\"token interpolation\"}},[a(\"span\",{pre:!0,attrs:{class:\"token interpolation-punctuation punctuation\"}},[t._v(\"${\")]),t._v(\"p1\"),a(\"span\",{pre:!0,attrs:{class:\"token interpolation-punctuation punctuation\"}},[t._v(\"}\")])]),a(\"span\",{pre:!0,attrs:{class:\"token template-punctuation string\"}},[t._v(\"`\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"let\")]),t._v(\" newStr \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" str\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"replace\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"re\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" replacer\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// Smith John\")]),t._v(\"\\nconsole\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"newStr\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\")])])]),a(\"h4\",{attrs:{id:\"string-prototype-search\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#string-prototype-search\"}},[t._v(\"#\")]),t._v(\" String.prototype.search\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"参数为正则表达式对象\")]),t._v(\" \"),a(\"li\",[t._v(\"返回首次匹配项的索引，否则返回-1\")])]),t._v(\" \"),a(\"h4\",{attrs:{id:\"string-prototype-split\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#string-prototype-split\"}},[t._v(\"#\")]),t._v(\" String.prototype.split\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"参数为字符串\")]),t._v(\" \"),a(\"li\",[t._v(\"输出分割后的数组\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language-js extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" names \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"Harry Trump ;Fred Barney; Helen Rigby ; Bill Abel ;Chris Hand \"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" re \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token regex\"}},[a(\"span\",{pre:!0,attrs:{class:\"token regex-delimiter\"}},[t._v(\"/\")]),a(\"span\",{pre:!0,attrs:{class:\"token regex-source language-regex\"}},[t._v(\"\\\\s*;\\\\s*\")]),a(\"span\",{pre:!0,attrs:{class:\"token regex-delimiter\"}},[t._v(\"/\")])]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// ['Harry Trump', 'Fred Barney', 'Helen Rigby', 'Bill Abel', 'Chris Hand']\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" nameList \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" names\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"trim\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"split\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"re\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])]),a(\"h4\",{attrs:{id:\"regexp-prototype-exec\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#regexp-prototype-exec\"}},[t._v(\"#\")]),t._v(\" RegExp.prototype.exec\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"参数为字符串\")]),t._v(\" \"),a(\"li\",[t._v(\"无论正则表达式对象有无g修饰符，都返回第一个完整匹配及其相关的捕获组\")]),t._v(\" \"),a(\"li\",[t._v(\"找不到匹配返回null\")])]),t._v(\" \"),a(\"h4\",{attrs:{id:\"regexp-prototype-test\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#regexp-prototype-test\"}},[t._v(\"#\")]),t._v(\" RegExp.prototype.test\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"参数为字符串\")]),t._v(\" \"),a(\"li\",[t._v(\"找到匹配返回true，否则返回false\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"普通字符\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#普通字符\"}},[t._v(\"#\")]),t._v(\" 普通字符\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"大小写字母\")]),t._v(\" \"),a(\"li\",[t._v(\"数字\")]),t._v(\" \"),a(\"li\",[t._v(\"标点，比如逗号、句号、问号、分号、引号\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"特殊字符\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#特殊字符\"}},[t._v(\"#\")]),t._v(\" 特殊字符\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"在非特殊字符之前的反斜杠表示下一个字符是特殊字符\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"\\\\b \\\\n \\\\f \\\\r \\\\t \\\\v \\\\w \\\\s \\\\S \\\\d \\\\D\\n\")])])]),a(\"ul\",[a(\"li\",[t._v(\"在特殊字符之前的反斜杠表示下一个字符不是特殊字符\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"\\\\\\\\ \\\\* \\\\+\\n\")])])]),a(\"ul\",[a(\"li\",[t._v(\"字符串字面量中反斜杠是转义字符，如果正则表达式对象中反斜杠是特殊字符一部分，需要在字符串字面量中转义；如果正则表达式对象中的反斜杠表示的就是反斜杠，需要在正则表达式对象和字符串字面量中转义\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language-js extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"a\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"z\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\"\\\\s\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"i \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<=\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"RegExp\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"[a-z]\\\\\\\\s\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"i\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"a\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"z\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\"\\\\\\\\\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"i \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<=\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"RegExp\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"[a-z]\\\\\\\\\\\\\\\\\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"i\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\")])])]),a(\"table\",[a(\"thead\",[a(\"tr\",[a(\"th\",[t._v(\"特殊字符\")]),t._v(\" \"),a(\"th\",[t._v(\"含义\")])])]),t._v(\" \"),a(\"tbody\",[a(\"tr\",[a(\"td\",[t._v(\"\\\\\")]),t._v(\" \"),a(\"td\")]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"^\")]),t._v(\" \"),a(\"td\")]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"$\")]),t._v(\" \"),a(\"td\")]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"*\")]),t._v(\" \"),a(\"td\")]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"+\")]),t._v(\" \"),a(\"td\")]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"?\")]),t._v(\" \"),a(\"td\",[t._v(\"① 匹配前面的子表达式0次或1次 ②跟在另一个限制匹配数量的限制符（* + ? {n} {n,} {n,m}）后，表示非贪婪匹配\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\".\")]),t._v(\" \"),a(\"td\")]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"()\")]),t._v(\" \"),a(\"td\")]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"(?😃\")]),t._v(\" \"),a(\"td\")]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"(?=)\")]),t._v(\" \"),a(\"td\")]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"(?<=)\")]),t._v(\" \"),a(\"td\")]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"(?!)\")]),t._v(\" \"),a(\"td\")]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"(?<!)\")]),t._v(\" \"),a(\"td\")]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"|\")]),t._v(\" \"),a(\"td\")]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"{n}\")]),t._v(\" \"),a(\"td\")]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"{n.}\")]),t._v(\" \"),a(\"td\")]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"{n, m}\")]),t._v(\" \"),a(\"td\")]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"[xyz]\")]),t._v(\" \"),a(\"td\")]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"[^xyz]\")]),t._v(\" \"),a(\"td\")]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"[\\\\b]\")]),t._v(\" \"),a(\"td\")]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"\\\\b\")]),t._v(\" \"),a(\"td\")]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"\\\\B\")]),t._v(\" \"),a(\"td\")]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"\\\\d\")]),t._v(\" \"),a(\"td\")]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"\\\\D\")]),t._v(\" \"),a(\"td\")]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"\\\\f\")]),t._v(\" \"),a(\"td\")]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"\\\\n\")]),t._v(\" \"),a(\"td\")]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"\\\\r\")]),t._v(\" \"),a(\"td\")]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"\\\\s\")]),t._v(\" \"),a(\"td\")]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"\\\\S\")]),t._v(\" \"),a(\"td\")]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"\\\\t\")]),t._v(\" \"),a(\"td\")]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"\\\\w\")]),t._v(\" \"),a(\"td\",[t._v(\"匹配一个单字字符（包括字母、数字下划线）\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"\\\\W\")]),t._v(\" \"),a(\"td\")])])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"修饰符\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#修饰符\"}},[t._v(\"#\")]),t._v(\" 修饰符\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"运算优先级\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#运算优先级\"}},[t._v(\"#\")]),t._v(\" 运算优先级\")])])}),[],!1,null,null,null);s.default=e.exports}}]);","extractedComments":[]}