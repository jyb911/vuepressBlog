{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{455:function(t,l,s){\"use strict\";s.r(l);var _=s(56),n=Object(_.a)({},(function(){var t=this,l=t.$createElement,s=t._self._c||l;return s(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[s(\"h2\",{attrs:{id:\"强制类型转换\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#强制类型转换\"}},[t._v(\"#\")]),t._v(\" 强制类型转换\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"const_cast：将常量指针/引用转化为非常量指针/引用\")]),t._v(\" \"),s(\"li\",[t._v(\"static_cast：\\n\"),s(\"ol\",[s(\"li\",[t._v(\"用于类层次结构中基类和派生类之间指针/引用的转换；上行转换（把派生类指针转换为基类指针）是安全的，下行转换不安全，因为没有动态类型检查\")]),t._v(\" \"),s(\"li\",[t._v(\"用于基本类型之间的转换\")]),t._v(\" \"),s(\"li\",[t._v(\"不能转换掉原有类型的const、volatile、或_unaligned属性\")]),t._v(\" \"),s(\"li\",[t._v(\"任何具有明确定义的类型转换，只要不包含const，都可以使用\")])])]),t._v(\" \"),s(\"li\",[t._v(\"dynamic_cast：用于类层次结构中基类和派生类之间指针/引用的转换；会进行动态类型检查；上行转换（把派生类指针转换为基类指针）是安全的，下行转换会返回一个nullptr\")]),t._v(\" \"),s(\"li\",[t._v(\"reinterpret_cast：进行低级别的类型转换，通常用于指针和整数的地址之间的转换\")]),t._v(\" \"),s(\"li\",[t._v(\"qobject_cast：将一个对象指针转换为指定类型指针\")])])])}),[],!1,null,null,null);l.default=n.exports}}]);","extractedComments":[]}